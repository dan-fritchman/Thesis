@misc{fritchmancim2021,
  author = {Dan Fritchman},
  title = {All-Digital In-Memory Computation for Machine Learning and Neural Network Acceleration},
  howpublished = {\url{https://github.com/dan-fritchman/NonAnalogComputeInMemoryArticle}},
  note = {Accessed: Date Accessed},
  year = {2021}
}

@ARTICLE{laygo,
  author={Han, Jaeduk and Bae, Woorham and Chang, Eric and Wang, Zhongkai and Nikolić, Borivoje and Alon, Elad},
  journal={IEEE Transactions on Circuits and Systems I: Regular Papers}, 
  title={LAYGO: A Template-and-Grid-Based Layout Generation Engine for Advanced CMOS Technologies}, 
  year={2021},
  volume={68},
  number={3},
  pages={1012-1022},
  doi={10.1109/TCSI.2020.3046524}}

@inproceedings{chang2018bag2,
  title={BAG2: A process-portable framework for generator-based AMS circuit design},
  author={Chang, Eric and Han, Jaeduk and Bae, Woorham and Wang, Zhongkai and Narevsky, Nathan and NikoliC, Borivoje and Alon, Elad},
  booktitle={2018 IEEE Custom Integrated Circuits Conference (CICC)},
  pages={1--8},
  year={2018},
  organization={IEEE}
}

@inproceedings{kunal2019align,
  title={ALIGN: Open-source analog layout automation from the ground up},
  author={Kunal, Kishor and Madhusudan, Meghna and Sharma, Arvind K and Xu, Wenbin and Burns, Steven M and Harjani, Ramesh and Hu, Jiang and Kirkpatrick, Desmond A and Sapatnekar, Sachin S},
  booktitle={Proceedings of the 56th Annual Design Automation Conference 2019},
  pages={1--4},
  year={2019}
}

@article{chen2020magical,
  title={MAGICAL: An open-source fully automated analog IC layout system from netlist to GDSII},
  author={Chen, Hao and Liu, Mingjie and Xu, Biying and Zhu, Keren and Tang, Xiyuan and Li, Shaolan and Lin, Yibo and Sun, Nan and Pan, David Z},
  journal={IEEE Design \& Test},
  volume={38},
  number={2},
  pages={19--26},
  year={2020},
  publisher={IEEE}
}

@INPROCEEDINGS{ye2023_ted_analog,
  author={Ye, Zuochang and Wang, Zhikai and Xin, Jian and Wang, Yuan and Qin, Qian and Chai, Chenkai and Lu, Yukai and Hao, Jinglei and Xiao, Jianhao and Wang, Yan},
  booktitle={2023 International Symposium of Electronics Design Automation (ISEDA)}, 
  title={TED: A Python-Based Analog Design Environment for Agile Circuit Development}, 
  year={2023},
  volume={},
  number={},
  pages={5-10},
  doi={10.1109/ISEDA59274.2023.10218475}}


@INPROCEEDINGS{autockt,
  author={Settaluri, Keertana and Haj-Ali, Ameer and Huang, Qijing and Hakhamaneshi, Kourosh and Nikolic, Borivoje},
  booktitle={2020 Design, Automation \& Test in Europe Conference \& Exhibition (DATE)}, 
  title={AutoCkt: Deep Reinforcement Learning of Analog Circuit Designs}, 
  year={2020},
  volume={},
  number={},
  pages={490-495},
  doi={10.23919/DATE48585.2020.9116200}}

@INPROCEEDINGS{bagnet,
  author={Hakhamaneshi, Kourosh and Werblun, Nick and Abbeel, Pieter and Stojanović, Vladimir},
  booktitle={2019 IEEE/ACM International Conference on Computer-Aided Design (ICCAD)}, 
  title={BagNet: Berkeley Analog Generator with Layout Optimizer Boosted with Deep Neural Networks}, 
  year={2019},
  volume={},
  number={},
  pages={1-8},
  doi={10.1109/ICCAD45719.2019.8942062}}

@INPROCEEDINGS{gupta98ilp,
  author={Gupta, A. and Hayes, J.P.},
  booktitle={1998 IEEE/ACM International Conference on Computer-Aided Design. Digest of Technical Papers (IEEE Cat. No.98CB36287)}, 
  title={Optimal 2-D cell layout with integrated transistor folding}, 
  year={1998},
  volume={},
  number={},
  pages={128-135},
  doi={10.1145/288548.288590}}


@INPROCEEDINGS{expert_design_plan,
  author={Schweikardt, Matthias and Scheible, Juergen},
  booktitle={2022 18th International Conference on Synthesis, Modeling, Analysis and Simulation Methods and Applications to Circuit Design (SMACD)}, 
  title={Expert Design Plan: A Toolbox for Procedural Automation of Analog Integrated Circuit Design}, 
  year={2022},
  volume={},
  number={},
  pages={1-4},
  doi={10.1109/SMACD55068.2022.9816336}}

@INPROCEEDINGS{swarm_parasitic_aware,
  author={Patel, Subhash Jagadishchandra and Thakker, Rajesh A},
  booktitle={2019 32nd International Conference on VLSI Design and 2019 18th International Conference on Embedded Systems (VLSID)}, 
  title={Parasitic-Aware Automatic Analog CMOS Circuit Design Environment}, 
  year={2019},
  volume={},
  number={},
  pages={245-250},
  doi={10.1109/VLSID.2019.00061}}

@INPROCEEDINGS{aida,
  author={Martins, Ricardo and Lourenço, Nuno and Canelas, António and Póvoa, Ricardo and Horta, Nuno},
  booktitle={2015 International Conference on Synthesis, Modeling, Analysis and Simulation Methods and Applications to Circuit Design (SMACD)}, 
  title={AIDA: Robust layout-aware synthesis of analog ICs including sizing and layout generation}, 
  year={2015},
  volume={},
  number={},
  pages={1-4},
  doi={10.1109/SMACD.2015.7301703}}

@INPROCEEDINGS{approaches_analog_synthesis89,
  author={Spence, R. and Toumazou, C. and Cheung, P. and Makris, C. and Berrah, C. and Singha, M. and Xiao Xiangming and Stone, J.},
  booktitle={IEE Colloquium on VLSI Analogue Design}, 
  title={Approaches to analogue IC synthesis}, 
  year={1989},
  volume={},
  number={},
  pages={1/1-1/6},
  doi={}}


@ARTICLE{laygen_ii,
  author={Martins, Ricardo and Lourenço, Nuno and Horta, Nuno},
  journal={IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems}, 
  title={LAYGEN II—Automatic Layout Generation of Analog Integrated Circuits}, 
  year={2013},
  volume={32},
  number={11},
  pages={1641-1654},
  doi={10.1109/TCAD.2013.2269050}}

@INPROCEEDINGS{lds_layout_description_script,
  author={Unutulmaz, A. and Dündar, G. and Fernández, F.V.},
  booktitle={2011 20th European Conference on Circuit Theory and Design (ECCTD)}, 
  title={LDS - A description script for layout templates}, 
  year={2011},
  volume={},
  number={},
  pages={857-860},
  doi={10.1109/ECCTD.2011.6043824}}

@ARTICLE{habal_constraint_based,
  author={Habal, Husni and Graeb, Helmut},
  journal={IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems}, 
  title={Constraint-Based Layout-Driven Sizing of Analog Circuits}, 
  year={2011},
  volume={30},
  number={8},
  pages={1089-1102},
  doi={10.1109/TCAD.2011.2158732}}

@INPROCEEDINGS{chisel12,
  author={Bachrach, Jonathan and Vo, Huy and Richards, Brian and Lee, Yunsup and Waterman, Andrew and Avižienis, Rimas and Wawrzynek, John and Asanović, Krste},
  booktitle={DAC Design Automation Conference 2012}, 
  title={Chisel: Constructing hardware in a Scala embedded language}, 
  year={2012},
  volume={},
  number={},
  pages={1212-1221},
  doi={10.1145/2228360.2228584}}

@INPROCEEDINGS{nvcell,
  author={Ren, Haoxing and Fojtik, Matthew},
  booktitle={2021 58th ACM/IEEE Design Automation Conference (DAC)}, 
  title={Invited- NVCell: Standard Cell Layout in Advanced Technology Nodes with Reinforcement Learning}, 
  year={2021},
  volume={},
  number={},
  pages={1291-1294},
  doi={10.1109/DAC18074.2021.9586188}}

@INPROCEEDINGS{stdcell_routing_sat_burns,
  author={Ryzhenko, Nikolai and Burns, Steven},
  booktitle={DAC Design Automation Conference 2012}, 
  title={Standard cell routing via Boolean satisfiability}, 
  year={2012},
  volume={},
  number={},
  pages={603-612},
  doi={10.1145/2228360.2228470}}

@ARTICLE{bonncell,
  author={Van Cleeff, Pascal and Hougardy, Stefan and Silvanus, Jannik and Werner, Tobias},
  journal={IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems}, 
  title={BonnCell: Automatic Cell Layout in the 7-nm Era}, 
  year={2020},
  volume={39},
  number={10},
  pages={2872-2885},
  doi={10.1109/TCAD.2019.2962782}}

@inproceedings{matsakis_rustlang,
author = {Matsakis, Nicholas D. and Klock, Felix S.},
title = {The Rust Language},
year = {2014},
isbn = {9781450332170},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.libproxy.berkeley.edu/10.1145/2663171.2663188},
doi = {10.1145/2663171.2663188},
abstract = {Rust is a new programming language for developing reliable and efficient systems. It is designed to support concurrency and parallelism in building applications and libraries that take full advantage of modern hardware. Rust's static type system is safe1 and expressive and provides strong guarantees about isolation, concurrency, and memory safety.Rust also offers a clear performance model, making it easier to predict and reason about program efficiency. One important way it accomplishes this is by allowing fine-grained control over memory representations, with direct support for stack allocation and contiguous record storage. The language balances such controls with the absolute requirement for safety: Rust's type system and runtime guarantee the absence of data races, buffer overflows, stack overflows, and accesses to uninitialized or deallocated memory.},
booktitle = {Proceedings of the 2014 ACM SIGAda Annual Conference on High Integrity Language Technology},
pages = {103–104},
numpages = {2},
keywords = {systems programming, affine type systems, rust, memory management},
location = {Portland, Oregon, USA},
series = {HILT '14}
}

@inproceedings{lattner2004,
author = {Lattner, Chris and Adve, Vikram},
title = {LLVM: A Compilation Framework for Lifelong Program Analysis \& Transformation},
year = {2004},
isbn = {0769521029},
publisher = {IEEE Computer Society},
address = {USA},
abstract = {This paper describes LLVM (Low Level Virtual Machine),a compiler framework designed to support transparent, lifelongprogram analysis and transformation for arbitrary programs,by providing high-level information to compilertransformations at compile-time, link-time, run-time, and inidle time between runs.LLVM defines a common, low-levelcode representation in Static Single Assignment (SSA) form,with several novel features: a simple, language-independenttype-system that exposes the primitives commonly used toimplement high-level language features; an instruction fortyped address arithmetic; and a simple mechanism that canbe used to implement the exception handling features ofhigh-level languages (and setjmp/longjmp in C) uniformlyand efficiently.The LLVM compiler framework and coderepresentation together provide a combination of key capabilitiesthat are important for practical, lifelong analysis andtransformation of programs.To our knowledge, no existingcompilation approach provides all these capabilities.We describethe design of the LLVM representation and compilerframework, and evaluate the design in three ways: (a) thesize and effectiveness of the representation, including thetype information it provides; (b) compiler performance forseveral interprocedural problems; and (c) illustrative examplesof the benefits LLVM provides for several challengingcompiler problems.},
booktitle = {Proceedings of the International Symposium on Code Generation and Optimization: Feedback-Directed and Runtime Optimization},
pages = {75},
location = {Palo Alto, California},
series = {CGO '04}
}

@inproceedings{svg2002,
author = {Jackson, Dean},
title = {Scalable Vector Graphics (SVG): The World Wide Web Consortium's Recommendation for High Quality Web Graphics},
year = {2002},
isbn = {1581135254},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.libproxy.berkeley.edu/10.1145/1242073.1242327},
doi = {10.1145/1242073.1242327},
abstract = {Scalable Vector Graphics (SVG) is a language for representing two-dimensional graphics. It was developed by the World Wide Web Consortium (W3C) to be the open standard format for both static and animated vector graphics on Web appliances, from desktop machines to mobile devices. The SVG 1.0 specification, whose authors Include representatives from Adobe, Microsoft, Sun, Kodak, Corel, Macromedia, IBM and Apple, became a W3C Recommendation in September 2001. SVG Is rapidly becoming the open standard of choice for graphics on the Web, and the many SVG implementations already in existence ensure the SVG documents can be viewed on a wide range of platforms.},
booktitle = {ACM SIGGRAPH 2002 Conference Abstracts and Applications},
pages = {319},
numpages = {1},
location = {San Antonio, Texas},
series = {SIGGRAPH '02}
}

@mastersthesis{kumar2023,
    Author = {Kumar, Rahul},
    Title = {A Composable Mixed-Signal Generator Framework with Applications to an SRAM Compiler},
    School = {EECS Department, University of California, Berkeley},
    Year = {2023},
    Month = {May},
    URL = {http://www2.eecs.berkeley.edu/Pubs/TechRpts/2023/EECS-2023-137.html},
    Number = {UCB/EECS-2023-137},
    Abstract = {Generators are a key component in enabling analog/mixed-signal design automation, reuse, and optimization. Existing generator frameworks suffer from being tightly integrated with commercial tools, having performance limitations, and being difficult to customize to circuits that require different styles of layout. In this thesis, we present Substrate, a new framework for writing analog and mixed-signal generators. Substrate offers high performance, strongly-typed APIs, and a wide set of utilities for schematic entry, layout entry, and functional verification. To provide more compact SRAMs that are easy to integrate into digital flows, we also develop SRAM22, an open-source SRAM generator for the Skywater 130nm open-source process. We describe how SRAM22 utilizes Substrate features to generate compact layout, while retaining the flexibility expected from a generator. SRAM22-generated SRAMs have been integrated into RISC-V cores produced using both open-source and commercial digital tools.}
}

@techreport{Varda2008,
  added-at = {2011-06-03T12:52:14.000+0200},
  author = {Varda, Kenton},
  biburl = {https://www.bibsonomy.org/bibtex/2fa05cec6c00ece80a4644756ad82b302/voj},
  institution = {Google},
  interhash = {3ecd49f2857e154472b259c2ad1a9ff2},
  intrahash = {fa05cec6c00ece80a4644756ad82b302},
  keywords = {encoding google number},
  month = {6},
  timestamp = {2011-06-03T12:52:15.000+0200},
  title = {Protocol Buffers: Google's Data Interchange Format},
  url = {http://google-opensource.blogspot.com/2008/07/protocol-buffers-googles-data.html},
  year = 2008
}

@INPROCEEDINGS{izraelevitz2017, 
author={A. Izraelevitz and J. Koenig and P. Li and R. Lin and A. Wang and A. Magyar and D. Kim and C. Schmidt and C. Markley and J. Lawson and J. Bachrach}, 
booktitle={2017 IEEE/ACM International Conference on Computer-Aided Design (ICCAD)}, 
title={Reusability is FIRRTL ground: Hardware construction languages, compiler frameworks, and transformations}, 
year={2017}, 
volume={}, 
number={}, 
pages={209-216}, 
keywords={field programmable gate arrays;hardware description languages;program compilers;software reusability;hardware development practices;hardware libraries;open-source hardware intermediate representation;hardware compiler transformations;Hardware construction languages;retargetable compilers;software development;virtual Cambrian explosion;hardware compiler frameworks;parameterized libraries;FIRRTL;FPGA mappings;Chisel;Flexible Intermediate Representation for RTL;Reusability;Hardware;Libraries;Hardware design languages;Field programmable gate arrays;Tools;Open source software;RTL;Design;FPGA;ASIC;Hardware;Modeling;Reusability;Hardware Design Language;Hardware Construction Language;Intermediate Representation;Compiler;Transformations;Chisel;FIRRTL}, 
doi={10.1109/ICCAD.2017.8203780}, 
ISSN={1558-2434}, 
month={Nov},
}

@techreport{li2016,
    Author = {Li, Patrick S. and Izraelevitz, Adam M. and Bachrach, Jonathan},
    Title = {Specification for the FIRRTL Language},
    Institution = {EECS Department, University of California, Berkeley},
    Year = {2016},
    Month = {Feb},
    URL = {http://www2.eecs.berkeley.edu/Pubs/TechRpts/2016/EECS-2016-9.html},
    Number = {UCB/EECS-2016-9}
}

@INPROCEEDINGS{baaij2010,
  author={Baaij, Christiaan and Kooijman, Matthijs and Kuper, Jan and Boeijink, Arjan and Gerards, Marco},
  booktitle={2010 13th Euromicro Conference on Digital System Design: Architectures, Methods and Tools}, 
  title={C?aSH: Structural Descriptions of Synchronous Hardware Using Haskell}, 
  year={2010},
  volume={},
  number={},
  pages={714-721},
  doi={10.1109/DSD.2010.21}
  }

@article{jiang2020pymtl3,
  title={PyMTL3: A Python framework for open-source hardware modeling, generation, simulation, and verification},
  author={Jiang, Shunning and Pan, Peitian and Ou, Yanghui and Batten, Christopher},
  journal={IEEE Micro},
  volume={40},
  number={4},
  pages={58--66},
  year={2020},
  publisher={IEEE}
}

@inproceedings{lockhart2014pymtl,
  title={PyMTL: A unified framework for vertically integrated computer architecture research},
  author={Lockhart, Derek and Zibrat, Gary and Batten, Christopher},
  booktitle={2014 47th Annual IEEE/ACM International Symposium on Microarchitecture},
  pages={280--292},
  year={2014},
  organization={IEEE}
}

@inproceedings{truong2019golden,
  title={A golden age of hardware description languages: Applying programming language techniques to improve design productivity},
  author={Truong, Lenny and Hanrahan, Pat},
  booktitle={3rd Summit on Advances in Programming Languages (SNAPL 2019)},
  year={2019},
  organization={Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik}
}